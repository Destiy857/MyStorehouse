(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-8c6eb774"],{"4b0f":function(s,a,n){"use strict";n.d(a,"b",(function(){return t})),n.d(a,"a",(function(){return p}));n("d3b7");var l={data:[{tagNames:["webpack"],status:1,viewCount:41,commentCount:0,likeCount:3,_id:"60409caaa78e1941e8513d1a",title:"webpack4.0 Mode 配置项学习和总结",category:"webpack",summary:"production 模式下的配置项和 development 模式下的配置项是一样的，只是值不同。对比一下就可以发现，production 模式更看重的是性能，安全，大小。而 development 模式更重视打包后代码的可阅读性和报错的实时性。",releaseTime:"2021-03-04T08:38:16.353Z",createdAt:"2021-03-04T08:39:06.645Z",updatedAt:"2021-12-27T09:23:22.619Z",__v:0},{tagNames:["axios","vue","api"],status:1,viewCount:165,commentCount:0,likeCount:3,_id:"6047d027a78e1941e8513d1c",title:"axios二次封装大型项目的api层",category:"axios",summary:"本文介绍了一种axios的二次封装，使得接口api化，每个接口就相当于工具上的api，只需要调用它，这个请求就被发出去了。除此之外还实现了 请求'自动绑定数据'和’防止重复提交‘",releaseTime:"2021-03-09T19:11:47.087Z",createdAt:"2021-03-09T19:44:39.022Z",updatedAt:"2021-12-27T05:16:21.266Z",__v:0},{tagNames:["vuepress"," git "],status:1,viewCount:161,commentCount:1,likeCount:3,_id:"604eb2273c8ec67668f6fd41",title:"只需三步， 部署Vuepress 并实现本地一行命令更新部署到服务器",category:"git",summary:"最近在写一个组件库， 用vuepress来开发官网文档，展示组件。涉及了Vuepress的部署问题。在这里分享一下。",releaseTime:"2021-03-15T01:00:33.063Z",createdAt:"2021-03-15T01:02:31.037Z",updatedAt:"2021-12-27T22:37:13.869Z",__v:0},{tagNames:["javascript"," vue"],status:1,viewCount:227,commentCount:0,likeCount:2,_id:"6062cf5a4792b2614a3cba80",title:"vue 中防抖(Debounce)和 节流(Throttle) 的使用姿势",category:"vue",summary:"本文总结了在vue组件中使用 debounce 的三种方式：1. 定义函数时使用 2.抽象组件 3.指令方式 。",releaseTime:"2021-03-30T07:06:56.401Z",createdAt:"2021-03-30T07:12:26.191Z",updatedAt:"2021-12-27T09:07:02.716Z",__v:0}],errno:0},e={HTML:'<div data-v-7100821e="" class="markdown-body"><h2 id="前言" data-source-line="1"><a class="toc-anchor" href="#前言"><span class="md-anchor">#</span></a> 前言</h2>\n<blockquote data-source-line="2">\n<p>什么是防抖和节流？<br>\n防抖（Debounce）和节流（Throttle）都是用来控制某个函数在一定时间内执行多少次的技巧，两者相似而又不同。在性能优化和交互优化中经常使用。</p>\n</blockquote>\n<p data-source-line="5"><strong>防抖(Debounce)</strong>：在函数被触发n秒后再执行，如果在n秒内又有函数执行，则重新计算。</p>\n<p data-source-line="7"><strong>节流(Throttle)</strong>：允许一个函数在 X 毫秒内只执行一次。</p>\n<p data-source-line="9">本文总结了在vue组件中使用 debounce 的三种方式:</p>\n<ol data-source-line="11">\n<li>定义函数时使用</li>\n<li>抽象组件</li>\n<li>指令方式</li>\n</ol>\n<p data-source-line="15">文章重点介绍debounce 的使用，而 throttle的使用和debounce基本一致， 就不啰嗦了</p>\n<h2 id="1-定义函数时使用" data-source-line="19"><a class="toc-anchor" href="#1-定义函数时使用"><span class="md-anchor">#</span></a> 1. 定义函数时使用</h2>\n<p data-source-line="21">定义 debounce 函数   <code>@/utils/index.js</code></p>\n<pre><code class="language-javascript hljs"><span class="hljs-comment">/**\n *  防抖 debounce\n * <span class="hljs-doctag">@param <span class="hljs-type">{Function}</span> <span class="hljs-variable">func</span></span>\n * <span class="hljs-doctag">@param <span class="hljs-type">{Number}</span> <span class="hljs-variable">wait</span></span>\n * <span class="hljs-doctag">@param <span class="hljs-type">{Boolean}</span> <span class="hljs-variable">immediate</span></span>\n * <span class="hljs-doctag">@returns <span class="hljs-type">{Function}</span></span>\n */</span>\n\n <span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span>  <span class="hljs-title">debounce</span> (<span class="hljs-params">func, wait=<span class="hljs-string">"300"</span>, immediate=<span class="hljs-string">"true"</span></span>) </span>{\n  <span class="hljs-keyword">let</span> timer\n  <span class="hljs-keyword">const</span> debounced = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)  </span>{\n    <span class="hljs-keyword">let</span> context = <span class="hljs-built_in">this</span>;\n    <span class="hljs-built_in">clearTimeout</span>(timer)\n    <span class="hljs-keyword">if</span> (immediate) {\n      <span class="hljs-keyword">let</span> callNow = !timer\n      timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> {\n        timer = <span class="hljs-literal">null</span>\n      }, wait)\n      <span class="hljs-keyword">if</span> (callNow) func.apply(context, <span class="hljs-built_in">arguments</span>)\n    } <span class="hljs-keyword">else</span> {\n      timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> {\n        func.apply(context, <span class="hljs-built_in">arguments</span>)\n      }, wait)\n    }\n  }\n  <span class="hljs-keyword">return</span> debounced\n}\n\n<span class="hljs-comment">/**\n *  节流 throttle\n * <span class="hljs-doctag">@param <span class="hljs-type">{Function}</span> <span class="hljs-variable">func</span></span>\n * <span class="hljs-doctag">@param <span class="hljs-type">{Number}</span> <span class="hljs-variable">wait</span></span>\n * <span class="hljs-doctag">@returns <span class="hljs-type">{Function}</span></span>\n */</span>\n<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">throttle</span>(<span class="hljs-params">func,wait=<span class="hljs-number">200</span></span>)</span>{\n    <span class="hljs-keyword">let</span> timeout = <span class="hljs-literal">true</span>\n    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n      <span class="hljs-keyword">let</span> context = <span class="hljs-built_in">this</span>;\n       <span class="hljs-keyword">if</span>(!timeout){\n           <span class="hljs-keyword">return</span> \n       }\n       timeout = <span class="hljs-literal">false</span>\n        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> {\n            func.apply(context, <span class="hljs-built_in">arguments</span>)\n            timeout = <span class="hljs-literal">true</span>;\n        }, wait)\n    }\n}\n\n</code></pre>\n<p data-source-line="75">vue 组件中 使用</p>\n<pre><code class="language-html hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"debounceClick"</span>&gt;</span>点击我 <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n<span class="hljs-keyword">import</span> { debounce } <span class="hljs-keyword">from</span> <span class="hljs-string">"@/utils/index"</span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n\t<span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n\t\t<span class="hljs-keyword">return</span> {\n\t\t\t<span class="hljs-attr">msg</span>:<span class="hljs-string">\'debounceClick\'</span>\n\t\t}\n\t},\n  <span class="hljs-attr">methods</span>: {\n    <span class="hljs-attr">debounceClick</span>: debounce(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{\n      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`<span class="hljs-subst">${<span class="hljs-built_in">this</span>.msg}</span>:<span class="hljs-subst">${<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getTime()}</span>`</span>);\n    }),\n  }\n};\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n</code></pre>\n<p data-source-line="100">注意: debounce 接收的函数假如用箭头函数 this.msg 将会报错，</p>\n<p data-source-line="102">在实际项目中可能会直接引入lodash/ underscore 库中的debounce函数。</p>\n<h2 id="2-抽象组件" data-source-line="106"><a class="toc-anchor" href="#2-抽象组件"><span class="md-anchor">#</span></a> 2. 抽象组件</h2>\n<blockquote data-source-line="108">\n<p>看过 Vue 源码的同学可以知道，<code>&lt;keep-alive&gt;</code>、<code>&lt;transition&gt;</code>、<code>&lt;transition-group&gt;</code>等组件<br>\n组件的实现是一个对象，注意它有一个属性 <code>abstract</code> 为 <code>true</code>，表明是它一个<code>抽象组件</code>。</p>\n<p>Vue 的文档没有提这个概念，在抽象组件的<strong>生命周期</strong>过程中，我们可以对包裹的子组件<strong>监听的事件进行拦截</strong>，也可以对子组件进行 <strong>Dom 操作</strong>，从而可以对我们需要的功能进行封装，而不需要关心子组件的具体实现。[1]</p>\n</blockquote>\n<p data-source-line="115">定义一个抽象组件</p>\n<p data-source-line="117"><code>@/components/debounce/debounce.js</code></p>\n<pre><code class="language-javascript hljs"><span class="hljs-keyword">import</span> { debounce } <span class="hljs-keyword">from</span> <span class="hljs-string">"@/utils/index"</span>;\n<span class="hljs-comment">// 基于1 定义的 debounce 函数</span>\n\n<span class="hljs-comment">// 基于1 定义的 debounce 函数</span>\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n  <span class="hljs-attr">name</span>: <span class="hljs-string">\'Debounce\'</span>,\n  <span class="hljs-attr">abstract</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">//标记为抽象组件</span>\n  <span class="hljs-attr">props</span>: {\n      <span class="hljs-attr">wait</span>: {\n          <span class="hljs-attr">type</span>:<span class="hljs-built_in">Number</span>,\n          <span class="hljs-attr">default</span>: <span class="hljs-literal">undefined</span>,\n      }, \n      <span class="hljs-attr">events</span>: {\n          <span class="hljs-attr">type</span>: <span class="hljs-built_in">Array</span>,\n          <span class="hljs-attr">default</span>:<span class="hljs-literal">undefined</span>\n      }, \n      <span class="hljs-attr">immediate</span>: {\n          <span class="hljs-attr">type</span>:<span class="hljs-built_in">Boolean</span>,\n          <span class="hljs-attr">default</span>: <span class="hljs-literal">undefined</span>\n      }\n  },\n  <span class="hljs-function"><span class="hljs-title">created</span>(<span class="hljs-params"></span>)</span> {\n    <span class="hljs-built_in">this</span>.eventKeys = <span class="hljs-built_in">this</span>.events &amp;&amp; <span class="hljs-built_in">this</span>.events.split(<span class="hljs-string">\',\'</span>)\n  },\n  <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> {\n    <span class="hljs-keyword">const</span> vnode = <span class="hljs-built_in">this</span>.$slots.default[<span class="hljs-number">0</span>] <span class="hljs-comment">// 子组件的vnode</span>\n    <span class="hljs-comment">// 如果默认没有传 events，则对所有绑定事件加上防抖</span>\n    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.eventKeys) {\n      <span class="hljs-built_in">this</span>.eventKeys = <span class="hljs-built_in">Object</span>.keys(vnode.data.on)\n    }\n    <span class="hljs-built_in">this</span>.eventKeys.forEach(<span class="hljs-function"><span class="hljs-params">key</span> =&gt;</span> {\n      vnode.data.on[key] = debounce(\n        vnode.data.on[key],\n        <span class="hljs-built_in">this</span>.wait,\n        <span class="hljs-built_in">this</span>.immediate\n      ).bind(vnode)\n    })\n    <span class="hljs-keyword">return</span> vnode\n  }\n}\n</code></pre>\n<p data-source-line="162"><code>@/components/debounce/index.js</code> 插件方式导出</p>\n<pre><code class="language-javascript hljs"><span class="hljs-keyword">import</span> debounce <span class="hljs-keyword">from</span> <span class="hljs-string">"./debounce"</span>;\ndebounce.install = <span class="hljs-function"><span class="hljs-params">Vue</span> =&gt;</span> {\n  Vue.component(debounce.name, debounce);\n};\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> debounce;\n</code></pre>\n<p data-source-line="172">在组件中使用</p>\n<pre><code class="language-html hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">Debounce</span>&gt;</span>\n     <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"handleClick"</span>&gt;</span>点击我 <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">Debounce</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n<span class="hljs-keyword">import</span> Debounce <span class="hljs-keyword">from</span> <span class="hljs-string">"@/components/debounce"</span>;\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n  <span class="hljs-attr">components</span>:{\n    Debounce\n  },\n\t<span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n\t\t<span class="hljs-keyword">return</span> {\n\t\t\t<span class="hljs-attr">msg</span>:<span class="hljs-string">\'handleClick\'</span>\n\t\t}\n\t},\n  <span class="hljs-attr">methods</span>: {\n    <span class="hljs-function"><span class="hljs-title">handleClick</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`<span class="hljs-subst">${<span class="hljs-built_in">this</span>.msg}</span>:<span class="hljs-subst">${<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getTime()}</span>`</span>);\n    }\n  }\n};\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n</code></pre>\n<h2 id="3-指令方式" data-source-line="200"><a class="toc-anchor" href="#3-指令方式"><span class="md-anchor">#</span></a> 3. 指令方式</h2>\n<p data-source-line="202">定义一个 debounce 指令</p>\n<p data-source-line="204"><code>@/directive/debounce/debounce.js</code></p>\n<pre><code class="language-javascript hljs"><span class="hljs-keyword">import</span> { debounce } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@/utils/index\'</span>\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span>  {\n  <span class="hljs-attr">inserted</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">el, binding, vnode</span>) </span>{\n    <span class="hljs-keyword">let</span> [fn,wait,immediate,event = <span class="hljs-string">"click"</span>] = binding.value\n    el.addEventListener(event, debounce(\n      fn,\n      wait,\n      immediate\n    ).bind(vnode))\n  }\n}\t\n</code></pre>\n<p data-source-line="221"><code>@/directive/debounce/index.js</code></p>\n<pre><code class="language-javascript hljs"><span class="hljs-keyword">import</span> debounce <span class="hljs-keyword">from</span> <span class="hljs-string">"./debounce"</span>;\n<span class="hljs-keyword">const</span> install = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">Vue</span>) </span>{\n  Vue.directive(<span class="hljs-string">"debounce"</span>, debounce);\n};\ndebounce.install = install;\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> debounce;\n\n</code></pre>\n<p data-source-line="232">在vue组件中使用</p>\n<pre><code class="language-html hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-debounce</span>=<span class="hljs-string">"[handleClick]"</span>&gt;</span>点击我 <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n<span class="hljs-keyword">import</span> debounce <span class="hljs-keyword">from</span> <span class="hljs-string">"@/directive/debounce"</span>;\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n  <span class="hljs-attr">directives</span>:{\n    debounce\n  },\n\t<span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n\t\t<span class="hljs-keyword">return</span> {\n\t\t\t<span class="hljs-attr">msg</span>:<span class="hljs-string">\'handleClick\'</span>\n\t\t}\n\t},\n  <span class="hljs-attr">methods</span>: {\n    <span class="hljs-function"><span class="hljs-title">handleClick</span>(<span class="hljs-params"></span>)</span> {\n      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`<span class="hljs-subst">${<span class="hljs-built_in">this</span>.msg}</span>:<span class="hljs-subst">${<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getTime()}</span>`</span>);\n    }\n  }\n};\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n</code></pre>\n<h2 id="总结" data-source-line="260"><a class="toc-anchor" href="#总结"><span class="md-anchor">#</span></a> 总结</h2>\n<p data-source-line="262">三种使用方式都各有千秋，可以结合业务场景来使用。</p>\n<h2 id="思考扩展" data-source-line="264"><a class="toc-anchor" href="#思考扩展"><span class="md-anchor">#</span></a> 思考扩展</h2>\n<p data-source-line="266">防抖在按钮中使用十分频繁， 每次都添加debounce会十分繁琐。假如有如下需求：</p>\n<p data-source-line="268">需求: 实现所有页面按钮的点击事件防抖控制</p>\n<p data-source-line="270"><a href="https://zhuanlan.zhihu.com/p/59939294">Vue Mixins高级组件与Vue HOC高阶组件应该怎么使用！</a></p>\n<h2 id="参考" data-source-line="274"><a class="toc-anchor" href="#参考"><span class="md-anchor">#</span></a> 参考</h2>\n<ol data-source-line="278">\n<li><a href="https://segmentfault.com/a/1190000019083265">用 Vue 编写抽象组件</a></li>\n<li><a href="https://cn.vuejs.org/v2/guide/custom-directive.html">vue.js文档 自定义指令</a></li>\n<li><a href="https://www.npmjs.com/package/v-debounce-throttle">v-debounce-throttle</a></li>\n</ol>\n</div>',category:"vue",commentCount:0,createdAt:"2021-03-30T07:12:26.191Z",likeCount:2,releaseTime:"2021-03-30T07:06:56.401Z",status:1,summary:"本文总结了在vue组件中使用 debounce 的三种方式：1. 定义函数时使用 2.抽象组件 3.指令方式 。",tagNames:["javascript"," vue"],title:"vue 中防抖(Debounce)和 节流(Throttle) 的使用姿势",updatedAt:"2021-12-27T09:07:02.716Z",viewCount:227,_id:"6062cf5a4792b2614a3cba80",errno:0};function t(){return new Promise((function(s,a){setTimeout((function(){var n=10*Math.random();if(n>8)return a(new Error("获取文章列表失败"));s(l)}),300)}))}function p(s){return new Promise((function(a,n){setTimeout((function(){if(!s)return n(new Error("文章不存在"));var l=10*Math.random();if(l>8)return n(new Error("获取文章失败"));a(e)}),300)}))}},"5f1e":function(s,a,n){"use strict";n.r(a);var l=function(){var s=this,a=s.$createElement;s._self._c;return s._m(0)},e=[function(){var s=this,a=s.$createElement,n=s._self._c||a;return n("div",{staticClass:"articleBox"},[n("div",{staticClass:"article-left"},[n("div",{staticClass:"article-text"},[n("ul",[n("li",{staticClass:"menu-title"},[s._v("目录")]),n("li",{staticClass:"menu-item menu-item--lv2"},[s._v("用法")]),n("li",{staticClass:"menu-item menu-item--lv2"},[s._v("配置")]),n("li",{staticClass:"menu-item menu-item--lv3"},[s._v("development")]),n("li",{staticClass:"menu-item menu-item--lv3"},[s._v("production")]),n("li",{staticClass:"menu-item menu-item--lv3"},[s._v("none")]),n("li",{staticClass:"menu-item menu-item--lv2"},[s._v("其他 NODE_ENV")]),n("li",{staticClass:"menu-item menu-item--lv2"},[s._v("总结")]),n("li",{staticClass:"menu-item menu-item--lv2"},[s._v("参考")])])])])])}],t=n("4b0f"),p={created:function(){Object(t["a"])("1231231").then((function(s){console.log("res",s)})).catch((function(s){alert(s)}))}},c=p,o=(n("6c25"),n("2877")),i=Object(o["a"])(c,l,e,!1,null,"e7d6c304",null);a["default"]=i.exports},"6c25":function(s,a,n){"use strict";n("fd45")},fd45:function(s,a,n){}}]);
//# sourceMappingURL=chunk-8c6eb774.903681b2.js.map